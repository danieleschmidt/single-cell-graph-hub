name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'dependencies'
          - 'code'
          - 'container'
      severity_threshold:
        description: 'Minimum severity to report'
        required: false
        default: 'medium' 
        type: choice
        options:
          - 'low'
          - 'medium'
          - 'high'
          - 'critical'

env:
  SCAN_TYPE: ${{ github.event.inputs.scan_type || 'full' }}
  SEVERITY_THRESHOLD: ${{ github.event.inputs.severity_threshold || 'medium' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Dependency Security Scanning
  # =============================================================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(fromJSON('["full", "dependencies"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety pip-audit
      
      - name: Run Safety check
        run: |
          safety check \
            --json \
            --output safety-report.json \
            --ignore 70612  # Ignore specific non-critical issues
        continue-on-error: true
      
      - name: Run pip-audit
        run: |
          pip-audit \
            --format=json \
            --output=pip-audit-report.json \
            --require-hashes \
            --local
        continue-on-error: true
      
      - name: Run Snyk vulnerability scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SEVERITY_THRESHOLD }} --json-file-output=snyk-report.json
        continue-on-error: true
      
      - name: Upload dependency scan reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-reports
          path: |
            safety-report.json
            pip-audit-report.json
            snyk-report.json
      
      - name: Parse and comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔒 Dependency Security Scan Results\n\n';
            
            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safetyReport.length > 0) {
                comment += `⚠️ **${safetyReport.length} vulnerabilities found by Safety**\n`;
                safetyReport.slice(0, 5).forEach(vuln => {
                  comment += `- ${vuln.package_name}: ${vuln.vulnerability_id}\n`;
                });
              } else {
                comment += '✅ No vulnerabilities found by Safety\n';
              }
            } catch (e) {
              comment += '❓ Safety scan results unavailable\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # Static Code Analysis Security
  # =============================================================================
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: contains(fromJSON('["full", "code"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install bandit semgrep
      
      - name: Run Bandit security linter
        run: |
          bandit -r src/ \
            -f json \
            -o bandit-report.json \
            -ll \
            -x tests/
        continue-on-error: true
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/flask
            p/django
            p/owasp-top-ten
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-extended,security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"
      
      - name: Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: results.sarif

      - name: Upload static analysis reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: static-analysis-reports
          path: |
            bandit-report.json
            results.sarif

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: contains(fromJSON('["full", "container"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: scgraph-hub:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scgraph-hub:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true
      
      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: scgraph-hub:scan
          args: --severity-threshold=${{ env.SEVERITY_THRESHOLD }} --json-file-output=snyk-container-report.json
        continue-on-error: true
      
      - name: Upload container scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Upload container scan reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-scan-reports
          path: |
            trivy-results.sarif
            trivy-fs-results.json
            snyk-container-report.json

  # =============================================================================
  # Secrets Scanning
  # =============================================================================
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Upload secrets scan reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secrets-scan-reports
          path: |
            results.json
            gitleaks-report.json

  # =============================================================================
  # License Compliance Scanning
  # =============================================================================
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pip-licenses licensecheck
      
      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses-report.json
          pip-licenses --format=html --output-file=licenses-report.html
      
      - name: Check license compliance
        run: |
          licensecheck --format json --output licenses-compliance.json
        continue-on-error: true
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-reports
          path: |
            licenses-report.json
            licenses-report.html
            licenses-compliance.json

  # =============================================================================
  # SBOM Generation
  # =============================================================================
  sbom-generation:
    name: Software Bill of Materials
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Generate SBOM with syft
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Generate Python SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -o sbom-python.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-reports
          path: |
            sbom.spdx.json
            sbom-python.json

  # =============================================================================
  # Security Report Generation
  # =============================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, container-scan, secrets-scan, license-scan, sbom-generation]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Generate security summary
        run: |
          python -c "
          import json
          import os
          from datetime import datetime
          
          report = {
              'scan_date': datetime.utcnow().isoformat(),
              'repository': '${{ github.repository }}',
              'ref': '${{ github.ref }}',
              'sha': '${{ github.sha }}',
              'scan_type': '${{ env.SCAN_TYPE }}',
              'severity_threshold': '${{ env.SEVERITY_THRESHOLD }}',
              'scans': {}
          }
          
          # Process dependency scan results
          try:
              with open('dependency-scan-reports/safety-report.json', 'r') as f:
                  safety_data = json.load(f)
                  report['scans']['dependency_safety'] = {
                      'status': 'completed',
                      'vulnerabilities_found': len(safety_data),
                      'high_severity': len([v for v in safety_data if v.get('severity', '').lower() in ['high', 'critical']])
                  }
          except:
              report['scans']['dependency_safety'] = {'status': 'failed'}
          
          # Process static analysis results
          try:
              with open('static-analysis-reports/bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
                  report['scans']['static_analysis_bandit'] = {
                      'status': 'completed',
                      'issues_found': len(bandit_data.get('results', [])),
                      'high_severity': len([r for r in bandit_data.get('results', []) if r.get('issue_severity') in ['HIGH', 'MEDIUM']])
                  }
          except:
              report['scans']['static_analysis_bandit'] = {'status': 'failed'}
          
          # Save report
          with open('security-summary.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          # Generate markdown report
          with open('security-summary.md', 'w') as f:
              f.write(f'# Security Scan Report\\n\\n')
              f.write(f'**Repository:** {report[\"repository\"]}\\n')
              f.write(f'**Scan Date:** {report[\"scan_date\"]}\\n')
              f.write(f'**Reference:** {report[\"ref\"]}\\n')
              f.write(f'**Commit:** {report[\"sha\"]}\\n\\n')
              
              f.write('## Scan Results\\n\\n')
              for scan_name, scan_data in report['scans'].items():
                  status_emoji = '✅' if scan_data['status'] == 'completed' else '❌'
                  f.write(f'### {scan_name.replace(\"_\", \" \").title()}\\n\\n')
                  f.write(f'{status_emoji} **Status:** {scan_data[\"status\"]}\\n')
                  if 'vulnerabilities_found' in scan_data:
                      f.write(f'📊 **Issues Found:** {scan_data[\"vulnerabilities_found\"]}\\n')
                  if 'high_severity' in scan_data:
                      f.write(f'⚠️ **High Severity:** {scan_data[\"high_severity\"]}\\n')
                  f.write('\\n')
          "
      
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: |
            security-summary.json
            security-summary.md
      
      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Could not read security summary:', error);
            }

  # =============================================================================
  # Security Notifications
  # =============================================================================
  notify-security:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
      - name: Download security summary
        uses: actions/download-artifact@v3
        with:
          name: security-summary
      
      - name: Check for critical vulnerabilities
        id: check-critical
        run: |
          if [ -f security-summary.json ]; then
            CRITICAL_COUNT=$(jq '[.scans[] | select(.high_severity > 0)] | length' security-summary.json)
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "has_critical=true" >> $GITHUB_OUTPUT
            else
              echo "has_critical=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_critical=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Notify security team of critical issues
        if: steps.check-critical.outputs.has_critical == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 **CRITICAL SECURITY VULNERABILITIES DETECTED** 🚨
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Critical Issues: ${{ steps.check-critical.outputs.critical_count }}
            
            Please review the security scan results immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
      
      - name: Create security issue for critical vulnerabilities
        if: steps.check-critical.outputs.has_critical == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `${summary}\n\n**This is an automated security alert. Please review and address these vulnerabilities promptly.**`,
              labels: ['security', 'critical', 'automated']
            });

  # =============================================================================
  # Security Dashboard Update
  # =============================================================================
  update-security-dashboard:
    name: Update Security Dashboard
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download security summary
        uses: actions/download-artifact@v3
        with:
          name: security-summary
      
      - name: Update security metrics
        run: |
          # This would typically push metrics to a monitoring system
          # For example, sending to Prometheus pushgateway or DataDog
          echo "Security scan completed at $(date)"
          echo "Results would be pushed to monitoring dashboard"
          
          # Example: Push to Prometheus pushgateway
          # curl -X POST http://pushgateway:9091/metrics/job/security-scan \
          #   --data-binary @security-metrics.txt