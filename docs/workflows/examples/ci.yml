name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, ready_for_review ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: 'false'
        type: boolean
      python_version:
        description: 'Python version to test'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

env:
  PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || 'false' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Code Quality and Security Checks
  # =============================================================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
      
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure
      
      - name: Run ruff
        run: ruff check src/ tests/ --output-format=github
      
      - name: Run black
        run: black --check --diff src/ tests/
      
      - name: Run isort
        run: isort --check --diff src/ tests/
      
      - name: Run mypy
        run: mypy src/
      
      - name: Run bandit security check
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # =============================================================================
  # Unit Tests
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev libhdf5-serial-dev
      
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install hdf5
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=scgraph_hub \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=junit.xml \
            -m "not slow and not gpu"
        env:
          SCGRAPH_DEV_MODE: true
          LOG_LEVEL: DEBUG
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            junit.xml
            htmlcov/
            coverage.xml

  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scgraph_hub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --cov=scgraph_hub \
            --cov-append \
            --cov-report=xml \
            --junit-xml=integration-junit.xml \
            -m "integration and not slow"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scgraph_hub_test
          REDIS_URL: redis://localhost:6379/0
          SCGRAPH_DEV_MODE: true
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-junit.xml
            coverage.xml

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety
      
      - name: Run safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Run semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            semgrep-results.json

  # =============================================================================
  # Build and Package
  # =============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # =============================================================================
  # Docker Build
  # =============================================================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # =============================================================================
  # Performance Tests
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'pull_request'
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            -v \
            --benchmark-json=benchmark.json \
            --benchmark-compare-fail=min:5% \
            --benchmark-compare-fail=mean:10%
        continue-on-error: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: benchmark.json

  # =============================================================================
  # Documentation Build
  # =============================================================================
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Build documentation
        run: |
          cd docs && make html
        continue-on-error: true
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: documentation
          path: docs/_build/html/

  # =============================================================================
  # Test Summary
  # =============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, build, docker-build]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
      
      - name: Set overall status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi

  # =============================================================================
  # Notifications
  # =============================================================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Notify Slack on failure
        if: needs.test-summary.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-alerts'
          text: '🚨 CI Pipeline failed for ${{ github.repository }} on ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on success
        if: needs.test-summary.result == 'success' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ CI Pipeline passed for ${{ github.repository }} - ready for deployment'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}