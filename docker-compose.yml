version: '3.8'

services:
  # =============================================================================
  # Main Application Service
  # =============================================================================
  scgraph-hub:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        TORCH_VERSION: "2.1.0"
        CUDA_VERSION: "cu118"
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    image: single-cell-graph-hub:latest
    container_name: scgraph-hub-app
    restart: unless-stopped
    
    environment:
      - SCGRAPH_DATA_DIR=/app/data
      - SCGRAPH_CACHE_DIR=/app/cache
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app/src
      - TORCH_HOME=/app/cache/torch
      - HF_HOME=/app/cache/huggingface
    
    volumes:
      - ./data:/app/data:rw
      - ./models:/app/models:rw
      - ./logs:/app/logs:rw
      - scgraph-cache:/app/cache:rw
    
    ports:
      - "8000:8000"
    
    networks:
      - scgraph-network
    
    depends_on:
      - redis
      - postgres
    
    healthcheck:
      test: ["CMD", "python", "-c", "import scgraph_hub; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Development Service
  # =============================================================================
  scgraph-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: single-cell-graph-hub:dev
    container_name: scgraph-hub-dev
    
    environment:
      - SCGRAPH_DEV_MODE=true
      - LOG_LEVEL=DEBUG
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/app/src
    
    volumes:
      - .:/app:rw
      - scgraph-cache:/app/cache:rw
      - jupyter-data:/home/scgraph/.jupyter:rw
    
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # Main app
      - "6006:6006"  # TensorBoard
    
    networks:
      - scgraph-network
    
    command: >
      bash -c "
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
        --NotebookApp.token='' --NotebookApp.password=''
      "

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: scgraph-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data:rw
    
    ports:
      - "6379:6379"
    
    networks:
      - scgraph-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # =============================================================================
  # PostgreSQL Database Service
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: scgraph-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: scgraph_hub
      POSTGRES_USER: scgraph
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scgraph_dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "5432:5432"
    
    networks:
      - scgraph-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scgraph -d scgraph_hub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # MinIO Object Storage (S3-compatible)
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: scgraph-minio
    restart: unless-stopped
    
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    
    volumes:
      - minio-data:/data:rw
    
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    
    networks:
      - scgraph-network
    
    command: server /data --console-address ":9001"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: scgraph-prometheus
    restart: unless-stopped
    
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    
    ports:
      - "9090:9090"
    
    networks:
      - scgraph-network
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: scgraph-grafana
    restart: unless-stopped
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "3000:3000"
    
    networks:
      - scgraph-network
    
    depends_on:
      - prometheus

  # =============================================================================
  # Jupyter Hub (for multi-user development)
  # =============================================================================
  jupyterhub:
    image: jupyterhub/jupyterhub:latest
    container_name: scgraph-jupyterhub
    restart: unless-stopped
    
    volumes:
      - ./docker/jupyterhub/jupyterhub_config.py:/etc/jupyterhub/jupyterhub_config.py:ro
      - jupyterhub-data:/srv/jupyterhub:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
    
    ports:
      - "8080:8000"
    
    networks:
      - scgraph-network
    
    environment:
      DOCKER_JUPYTER_IMAGE: single-cell-graph-hub:dev
      DOCKER_NETWORK_NAME: ${COMPOSE_PROJECT_NAME:-scgraph}_scgraph-network

# =============================================================================
# Networks
# =============================================================================
networks:
  scgraph-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  scgraph-cache:
    driver: local
  jupyter-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jupyterhub-data:
    driver: local